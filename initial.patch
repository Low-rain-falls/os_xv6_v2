diff --git a/Makefile b/Makefile
index 74e454f..431d7fb 100644
--- a/Makefile
+++ b/Makefile
@@ -194,6 +194,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	# $U/_pgaccesstest\
 
 
 
diff --git a/kernel/exec.c b/kernel/exec.c
index 6d7c452..a79e3c5 100644
--- a/kernel/exec.c
+++ b/kernel/exec.c
@@ -127,6 +127,11 @@ exec(char *path, char **argv)
   p->trapframe->epc = elf.entry;  // initial program counter = main
   p->trapframe->sp = sp; // initial stack pointer
   proc_freepagetable(oldpagetable, oldsz);
+  
+  if (p->trapframe->a0 < 0) {
+    return -1;
+  }
+  vmprint(p->pagetable);
 
   return argc; // this ends up in a0, the first argument to main(argc, argv)
 
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 6cfff1e..457040e 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -375,6 +375,7 @@ typedef uint64 *pagetable_t; // 512 PTEs
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // user can access
+#define PTE_A (1L << 6) // access bit
 
 
 
diff --git a/kernel/syscall.c b/kernel/syscall.c
index 4aea542..0d45d5c 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -109,6 +109,7 @@ extern uint64 sys_send(void);
 extern uint64 sys_recv(void);
 #endif
 #ifdef LAB_PGTBL
+extern uint64 sys_pgaccess(void);
 extern uint64 sys_pgpte(void);
 extern uint64 sys_kpgtbl(void);
 #endif
@@ -144,6 +145,7 @@ static uint64 (*syscalls[])(void) = {
 [SYS_recv] sys_recv,
 #endif
 #ifdef LAB_PGTBL
+[SYS_pgaccess] sys_pgaccess,
 [SYS_pgpte] sys_pgpte,
 [SYS_kpgtbl] sys_kpgtbl,
 #endif
diff --git a/kernel/syscall.h b/kernel/syscall.h
index a122272..d0dcdd9 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -35,3 +35,4 @@
 #define SYS_recv      32
 #define SYS_pgpte     33
 #define SYS_kpgtbl    34
+#define SYS_pgaccess  35
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index d9b7f9c..8161115 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -123,3 +123,41 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64 sys_pgaccess(void) {
+  uint64 va; // virtual address
+  int num_page;
+  uint64 mask_addr; // buffer for bitmask
+  
+  vmprint(myproc()->pagetable);
+
+  argaddr(0, &va);
+  argint(1, &num_page);
+  argaddr(2, &mask_addr);
+
+  if (num_page > 64 || num_page <= 0 || mask_addr == 0 || va == 0) {
+    return -1;
+  }
+
+  struct proc *p = myproc();
+  uint64 bitmask = 0;
+
+  for (int i = 0; i < num_page; i++) {
+    pte_t *pte = walk(p->pagetable, va + i * PGSIZE, 0);
+
+    // check valid
+    if (pte && (*pte & PTE_V)) {
+      // check access
+      if (*pte & PTE_A) {
+        bitmask |= (1ULL << i); // set bit
+        *pte &= ~PTE_A;
+      }
+    }
+  }
+
+  if (copyout(p->pagetable, mask_addr, (char*)&bitmask, sizeof(bitmask)) < 0) {
+    return -1;
+  }
+
+  return 0;
+}
diff --git a/kernel/vm.c b/kernel/vm.c
index 7f388fe..833e2c9 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -488,9 +488,35 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
 
 
 #ifdef LAB_PGTBL
-void
-vmprint(pagetable_t pagetable) {
-  // your code here
+void vmprint_recursive(pagetable_t pagetable, int level) {
+  // page entries loop
+  for (int i = 0; i < 512; i++) {
+    pte_t* pte = &pagetable[i];
+    // check valid flag
+    if (*pte & PTE_V) {
+      // print .. for each level
+      for (int j = 2; j >= level; j--) {
+        if (j == level)
+        {
+          printf("..");
+          break;
+        }
+        printf(".. ");
+      }
+      // print data
+      printf("%d: pte %p pa %p\n", i, (pte_t*)(*pte), (pte_t*)PTE2PA(*pte));
+      
+      // check if a leaf to go deeper
+      if (level > 0) {
+        vmprint_recursive((pagetable_t)PTE2PA(*pte), level - 1);
+      }
+    }
+  }
+}
+
+void vmprint(pagetable_t pagetable){
+  printf("page table %p\n", pagetable);
+  vmprint_recursive(pagetable, 2);
 }
 #endif
 
diff --git a/user/pgaccesstest.c b/user/pgaccesstest.c
new file mode 100644
index 0000000..4ce295d
--- /dev/null
+++ b/user/pgaccesstest.c
@@ -0,0 +1,18 @@
+#include "user/user.h"
+#include "stdio.h"
+#include "kernel/types.h"
+
+int main () {
+    int* arr = (int*) sbrk(4096 * 2);
+    arr[0] = 42;
+    arr[1024] = 84;
+
+    uint64 mask;
+    if (pgaccess(arr, 2, mask) < 0) {
+        printf("pgaccess failed.\n");
+        exit(1);
+    }
+
+    printf("Accessed pages bitmask: %lx \n", mask);
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/pgtbltest.c b/user/pgtbltest.c
index cde6e03..6d19699 100644
--- a/user/pgtbltest.c
+++ b/user/pgtbltest.c
@@ -10,14 +10,16 @@ void print_pgtbl();
 void print_kpgtbl();
 void ugetpid_test();
 void superpg_test();
+void pgaccess_test();
 
 int
 main(int argc, char *argv[])
 {
   print_pgtbl();
-  ugetpid_test();
+  // ugetpid_test();
   print_kpgtbl();
-  superpg_test();
+  // superpg_test();
+  pgaccess_test();
   printf("pgtbltest: all tests succeeded\n");
   exit(0);
 }
@@ -140,3 +142,33 @@ superpg_test()
   }
   printf("superpg_test: OK\n");  
 }
+
+void pgaccess_test() {
+  printf("pgaccess_test starting\n");
+
+  char *buf = sbrk(3 * 4096);
+  if (buf == (char *) -1) {
+      printf("sbrk failed\n");
+      exit(1);
+  }
+
+  // Access pages 0 and 2
+  buf[0] = 'A';        // Page 0
+  buf[8192] = 'B';     // Page 2
+
+  // Prepare bitmask buffer
+  uint64 mask = 0;
+
+  // Call pgaccess to check which pages were accessed
+  if (pgaccess(buf, 3, &mask) < 0) {
+      printf("pgaccess failed\n");
+      exit(1);
+  }
+
+  // Expected bitmask: 0b101 (page 0 and 2 accessed)
+  if (mask == 0b101) {
+      printf("pgaccess test passed! Bitmask = %lx\n", mask);
+  } else {
+      printf("pgaccess test failed! Expected 0x5, got 0x%lx\n", mask);
+  }
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index b91fd89..9838816 100644
--- a/user/user.h
+++ b/user/user.h
@@ -33,6 +33,7 @@ int send(uint32, uint32, uint32, char *, uint32);
 int recv(uint32, uint32*, uint32*, char *, uint32);
 #endif
 #ifdef LAB_PGTBL
+int pgaccess(void *va, int num_page, uint64 *mask);
 int ugetpid(void);
 uint64 pgpte(void*);
 void kpgtbl(void);
diff --git a/user/usys.pl b/user/usys.pl
index 2c19fa6..e841e34 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -42,3 +42,4 @@ entry("send");
 entry("recv");
 entry("pgpte");
 entry("kpgtbl");
+entry("pgaccess")
